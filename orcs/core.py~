#!/usr/bin/python
# *-* coding: utf-8 *-*
# Author: Thomas Martin <thomas.martin.1@ulaval.ca>
# File: orcs.py

__author__ = "Thomas Martin"
__licence__ = "Thomas Martin (thomas.martin.1@ulaval.ca)"                      
__docformat__ = 'reStructuredText'
__version__ = "0.7"

"""
Core classes of ORCS.

.. note:: ORCS is built over ORBS so that ORBS must be
  installed. Please make sure to give ORCS the correct path to ORBS
  files
"""

## BASIC IMPORTS

import os, sys

# import data
from data import *

# import ORBS
try:
    sys.path.append(ORBS_PATH)
    from orbs.core import *
    from orbs.astrometry import *
    from orbs.utils import *
    from orbs.cutils import *
    
except IOError, e:
    print "ORBS could not be found at %s. Check orcs/data.py"%ORBS_PATH
    print e
    sys.exit(2)


#import pyneb as pn

#################################################
#### CLASS ORCSTools ############################
#################################################
class ORCSTools(Tools):
    """
    This class is simply an extension of the orbs.core.Tools class of
    ORBS. Some ORCS specific methods and attributes are added.
    
    Spectral lines rest wavelength::
    
      ============ ======== =======
        Em. Line    Vaccum    Air
      ============ ======== =======
      [OII]3726    372.709  372.603
      [OII]3729    372.988  372.882
      Hepsilon     397.119  397.007
      Hdelta       410.292  410.176
      Hgamma       434.169  434.047
      [OIII]4363   436.444  436.321
      Hbeta        486.269  486.133
      [OIII]4959   496.030  495.892
      [OIII]5007   500.824  500.684
      [NII]6548    654.984  654.803
      Halpha       656.461  656.280
      [NII]6583    658.523  658.341
      [SII]6716    671.832  671.647
      [SII]6731    673.271  673.085
    """
    vac_lines_nm = {'[OII]3726':372.709,
                    '[OII]3729':372.988,
                    'Hepsilon':397.119,
                    'Hdelta':410.292,
                    'Hgamma':434.169,
                    '[OIII]4363':436.444,
                    'Hbeta':486.269,
                    '[OIII]4959':496.030,
                    '[OIII]5007':500.824,
                    '[NII]6548':654.984,
                    'Halpha':656.461,
                    '[NII]6583':658.523,
                    '[SII]6716':671.832,
                    '[SII]6731':673.271}
    """Vacuum emission lines wavelength"""
    
    air_lines_nm = {'[OII]3726':372.603,
                    '[OII]3729':372.882,
                    'Hepsilon':397.007,
                    'Hdelta':410.176,
                    'Hgamma':434.047,
                    '[OIII]4363':436.321,
                    'Hbeta':486.133,
                    '[OIII]4959':495.892,
                    '[OIII]5007':500.684,
                    '[NII]6548':654.803,
                    'Halpha':656.280,
                    '[NII]6583':658.341,
                    '[SII]6716':671.647,
                    '[SII]6731':673.085}
    """Air emission lines wavelength"""

    def get_line_nm(self, lines_name, air=True, round_ang=False):
        """Return the wavelength of a line or a list of lines

        :param lines_name: List of lines name

        :param air: (Optional) If True, air rest wavelength are
          returned. If False, vacuum rest wavelength are
          returned. (default True)

        :param round_ang: (Optional) If True return the rounded
          wavelength of the line in angstrom (default False)
        """
        if isinstance(lines_name, str):
            lines_name = [lines_name]
        if air:
            lines_nm = [self.air_lines_nm[line_name]
                        for line_name in lines_name]
        else:
            lines_nm = [self.vac_lines_nm[line_name]
                        for line_name in lines_name]

        if len(lines_nm) == 1:
            lines_nm = lines_nm[0]
            
        if round_ang:
            return self.round_nm2ang(lines_nm)
        else:
            return lines_nm

    def get_line_name(self, lines, air=True):
        """Return the name of a line or a list of lines given their
        wavelength.

        :param lines: List of lines wavelength

        :param air: (Optional) If True, rest wavelength is considered
          to be in air. If False it is considered to be in
          vacuum. (default True)
        """
        if isinstance(lines, (float, int)):
            lines = [lines]
            
        if air:
            line_name = [line_name
                         for line_name
                         in self.air_lines_nm.iterkeys()
                         if self.air_lines_nm[line_name] == lines]
            return str(line_name[0])
        else:
            line_name = [line_name
                         for line_name
                         in self.vac_lines_nm.iterkeys()
                         if self.vac_lines_nm[line_name] == lines]
            return str(line_name[0])
    
    def round_nm2ang(self, nm):
        """Convert a wavelength in nm into a rounded value in angstrom

        :param nm: Line wavelength in nm
        """
        return np.squeeze(np.rint(np.array(nm) * 10.).astype(int))
    
#################################################
#### CLASS OptionFile ###########################
#################################################
        
class OptionFile(ORCSTools):
    """Manage the option file"""


    option_file = None
    options = None
    
    def __init__(self, option_file_path):
        """Initialize class

        :param option_file_path: Path to the option file
        """
        
        self.option_file = self.open_file(option_file_path, 'r')
        self.options = dict()
        for line in self.option_file:
            if len(line) > 2:
                if line[0] != '#':
                    if '#' in line:
                        line = line[:line.find('#')]
                    line = line.split()
                    if len(line) > 2:
                        self.options[line[0]] = line[1:]
                    elif len(line) > 1:
                        self.options[line[0]] = line[1]

                        
    def __getitem__(self, key):
        if key in self.options:
            return self.options[key]
        else: return None
        
    def iteritems(self):
        return self.options.iteritems()

    def get(self, key, cast=str):
        param = self.__getitem__(key)
        if param != None:
            return cast(param)
        else:
            return None

    def get_regions_parameters(self):
        """Get regions parameters  """
        return {k:v for k,v in self.iteritems() if k.startswith('REG')}

    def get_lines(self):
        """Get lines parameters"""
        lines = self['LINES']
        lines_nm = list()
        if len(lines) > 2:
            lines = lines.split(',')
            for iline in lines:
                try:
                    lines_nm.append(float(iline))
                except:
                    lines_nm.append(self.get_line_nm(iline))
        else:
            return None
        
        return lines_nm
            
    def get_filter_edges(self):
        """Get filter eges parameters"""
        filter_edges = self['FILTER_EDGES']
        if filter_edges != None:
            filter_edges = filter_edges.split(',')
            if len(filter_edges) == 2:
                return np.array(filter_edges).astype(float)
            else:
                self._print_error('Bad filter edges definition: check option file')
        else:
            return None

