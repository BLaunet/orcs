#!/usr/bin/env python
# *-* coding: utf-8 *-*
# Author: Thomas Martin <thomas.martin.1@ulaval.ca>

## Copyright (c) 2010-2014 Thomas Martin <thomas.martin.1@ulaval.ca>
## 
## This file is part of ORCS
##
## ORCS is free software: you can redistribute it and/or modify it
## under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## ORCS is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
## or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
## License for more details.
##
## You should have received a copy of the GNU General Public License
## along with ORCS.  If not, see <http://www.gnu.org/licenses/>.

####################################################
############ ORCS Command Line #####################
####################################################

# This script is aimed to run the data extraction

# To run this script simply use the following command :
# $ ./orcs option_file.opt start
# Remember : for any help please refer to the documentation

import sys, os, time
import argparse
from argparse import ArgumentParser
import numpy as np

# Defining the path to ORCS module from script location
script_path = os.path.dirname(os.path.realpath(__file__)).split()
orbs_path = os.path.normpath(('%s'%os.sep).join(str(script_path[0]).split(os.sep)[:-1]))
sys.path.append(orbs_path)

import orb
from orb.core import Tools
import orcs
from orcs.orcs import Orcs

def get_config_file_name(args):
    if args.instrument == 'sitelle':
        return 'config.sitelle.orb'
        
    elif args.instrument == 'spiomm':
        return 'config.spiomm.orb'
    

def start(args, info):
    """Start extraction

    :param args: Namespace object containing the passed argments
      returned by the function ArgParse.parse_args().
    """
    
    start_time = time.time()

    to = Tools(config_file_name=get_config_file_name(args))

    if not info:
        # special modes are mutually exclusive
        if np.sum([args.sky, args.regions]) > 1:
            print_error("only one special extraction mode (regions or sky) can be choosen")
            sys.exit(2)
        

    ###################################
    # Run ORCS with the given options #
    ###################################
    
    to._print_msg("Start extraction : %s"%str(args.option_file_path),
                  color=True)
    
    orcs = Orcs(args.option_file_path,
                config_file_name=get_config_file_name(args))

    if info:
        pass
    elif args.regions:
        orcs.extract_integrated_spectra()
    elif args.sky:
        orcs.get_sky_radial_velocity()
    else:
        orcs.extract_lines_maps()
        
        
    end_time = time.time()
    to._print_msg("Script finished at : " + time.ctime(end_time), color=True)
    to._print_msg("Total time : " + str((end_time - start_time) / 3600.) + " hours", color=True)         




####################################
#### MAIN ##########################
####################################


if __name__ == "__main__":
    """Main entrance of the script.
    
    Parse arguments and launch the extraction process.
    """

    parser = ArgumentParser(
        prog='orcs',
        version=('ORCS-version: {}, ORB-version: {}'.format(
            orcs.version.__version__, orb.core.__version__)),
        description="Run the extraction process.")


    parser.add_argument('instrument', choices=['spiomm', 'sitelle'],
                        action='store', default='spiomm',
                        help="Reduction mode. Force the use of the reduction file of a particular instrument. Mode is set to 'spiomm' by default.")

    parser.add_argument('option_file_path',
                        action='store',
                        help="Path to the ORCS option file.")


    subparsers = parser.add_subparsers(help='operation type', dest='subparser_name')

    parser_start = subparsers.add_parser('start', help='Start the extraction process.')

    group_target = parser_start.add_argument_group('Extraction modes', '')
    
    group_target.add_argument('--regions', dest='regions',
                              action='store_true',
                              default=False,
                              help="Extract the integrated spectra of the regions defined in a ds9 region file. Note that the keyword INTEG_REG_PATH in the option file must be set to the path of a ds9 region file.")

    group_target.add_argument('--sky', dest='sky',
                              action='store_true',
                              default=False,
                              help="Extract a sky spectrum and fit its lines to return the sky velocity. Note that the SKY_REG keyword in the option file must be set to the path of a ds9 region file.")
    
    parser_info = subparsers.add_parser('info', help='Print values computed at the beginning of the extraction process.')

    

    if len(sys.argv) < 2:
        parser.print_usage()
        sys.exit(2)
        
    args = parser.parse_args()

    # check option file existence
    if not os.path.exists(args.option_file_path):
        raise Exception('Option file %s does not exist'%args.option_file_path)

    ####################
    # start extraction #
    ####################

    start(args, args.subparser_name == 'info')




