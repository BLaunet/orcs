#!/usr/bin/env python
# *-* coding: utf-8 *-*
# Author: Thomas Martin <thomas.martin.1@ulaval.ca>

## Copyright (c) 2010-2014 Thomas Martin <thomas.martin.1@ulaval.ca>
## 
## This file is part of ORCS
##
## ORCS is free software: you can redistribute it and/or modify it
## under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## ORCS is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
## or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
## License for more details.
##
## You should have received a copy of the GNU General Public License
## along with ORCS.  If not, see <http://www.gnu.org/licenses/>.

####################################################
############ ORCS Tweak ############################
####################################################

# Spectral cube tweaking operations

# Remember : for any help please refer to the documentation

import sys, os, time
import argparse
from argparse import ArgumentParser
import numpy as np

# Defining the path to ORCS module from script location
script_path = os.path.dirname(os.path.realpath(__file__)).split()
orbs_path = os.path.normpath(('%s'%os.sep).join(str(script_path[0]).split(os.sep)[:-1]))
sys.path.append(orbs_path)

import orb
import orcs
from orcs.core import Tools
from orcs.tweak import OrcsTweak

def get_config_file_name(args):
    if args.instrument == 'sitelle':
        return 'config.sitelle.orb'
        
    elif args.instrument == 'spiomm':
        return 'config.spiomm.orb'
    

def main(args):
    """Start extraction

    :param args: Namespace object containing the passed argments
      returned by the function ArgParse.parse_args().
    """
    
    start_time = time.time()

    to = Tools(config_file_name=get_config_file_name(args), ncpus=args.ncpus)
        

    ###################################
    # Run OrcsBase with the given options #
    ###################################
    
    orcs = OrcsTweak(args.hdf5_cube_path,
                     config_file_name=get_config_file_name(args),
                     ncpus=args.ncpus)

    if args.subparser_name == 'extract':
        orcs.extract_integrated_spectrum(args.region_file_path)

    if args.subparser_name == 'subtract':
        orcs.subtract_spectrum(args.spectrum_file_path)


####################################
#### MAIN ##########################
####################################


if __name__ == "__main__":
    """Main entrance of the script.
    
    Parse arguments and launch the extraction process.
    """

    parser = ArgumentParser(
        prog='orcs-tweak',
        version=('ORCS-version: {}, ORB-version: {}'.format(
            orcs.version.__version__, orb.core.__version__)),
        description="Tweak a spectral cube.")


    parser.add_argument('instrument', choices=['spiomm', 'sitelle'],
                        action='store', default='spiomm',
                        help="Reduction mode. Force the use of the reduction file of a particular instrument. Mode is set to 'spiomm' by default.")

    parser.add_argument(
        '--ncpus', dest='ncpus', action='store',
        default=None,
        type=int,
        help="Number of CPUs to use for parallel processing (default set in config file)")

    parser.add_argument('hdf5_cube_path', type=str,
                        action='store',
                        help="Path to the spectral HDF5 cube")

    subparsers = parser.add_subparsers(help='operation type', dest='subparser_name')

    parser_extract = subparsers.add_parser('extract', help='Extract the integrated spectrum over a region.')

    parser_extract.add_argument('region_file_path', type=str,
                                action='store',
                                help="Path to a ds9 region file")

    parser_subtract = subparsers.add_parser('subtract', help='Subtract a spetcrum to the whole cube.')

    parser_subtract.add_argument('spectrum_file_path', type=str,
                                action='store',
                                help="Path to the spectrum file")



    if len(sys.argv) < 2:
        parser.print_usage()
        sys.exit(2)
        
    args = parser.parse_args()


    main(args)


